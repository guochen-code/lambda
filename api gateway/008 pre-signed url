(1) s3
create
without public access

------------------------------------------------------------------------------------------------------------------------ local access keys
import constants # contain access keys, need user permissions to s3
import boto3
import requests

object_name_to_upload='file_to_upload.jpg'

s3_client=boto3.client('s3',aws_access_key_id=constant.access_key,aws_secret_access_key=constants.secret_access_key)

# generate pre-signed url
response = s3_clients.generate_presigned_post(Bucket='my_bucket',Key=object_name_to_upload,ExpiresIn=3) # 3 seconds

print(response)

# upload file to s3 using presigned url
files={'file':open(object_name_to_upload,'rb')} # open file in binary format
r=requests.post(response['url'],data=response['fields'],files=files)
print(r.status_code)

**** resposne example:
response={'url':'https://......com/','fields':{'key':'file_to_upload.jpg', 'AWSAccessKeyId"':'....','policy':'......', 'signature':'....'}}

****************************************************************************************************************************************************************
The files could be big and passing from client to server to S3 could take forever. A direct method is always better
https://plainenglish.io/blog/access-files-from-aws-s3-using-pre-signed-urls-in-python

high-level design
user - api gateway - lambda -s3 # lambda here only repsonsible for generating the pre-signed url

------------------------------------------------------------------------------------------------------------------------ lambda access keys

configuration - permissoin - AmazonS3FullAccess - 
create api gateway - integrate with lambda function

Lambda Code:
------------------------
import json

import logging
import boto3
from botocore.exceptions import ClientError


def create_presigned_post(bucket_name, object_name, expiration=3600):
    """Generate a presigned URL S3 POST request to upload a file

    :param bucket_name: string
    :param object_name: string
    :param expiration: Time in seconds for the presigned URL to remain valid
    :return: Dictionary with the following keys:
        url: URL to post to
        fields: Dictionary of form fields and values to submit with the POST
    :return: None if error.
    """

    # Generate a presigned S3 POST URL
    s3_client = boto3.client('s3')
    try:
        response = s3_client.generate_presigned_post(bucket_name,
                                                     object_name,
                                                     ExpiresIn=expiration)
    except ClientError as e:
        logging.error(e)
        return None

    # The response contains the presigned URL and required fields
    return response


    
    
def lambda_handler(event, context):
    # TODO implement
    object_name=event['queryStringParameters']['file_name']
    print(object_name)
    bucket_name="marketinghelloworld"
    response=create_presigned_post(bucket_name, object_name, expiration=3600)
    print(response)
    return {
        'statusCode': 200,
        'body': json.dumps(response)
    }


Code to get Signed URL & Upload content using it:
---------------------------------------------------------------------------------- user side code 

!pip install requests
import requests 
import json
file_name=input("Enter the file name which you want to upload : ")
complete_file_path=input("Enter the complete file path : ")
api_base_url="<api gateway invoke url + resource path>"
api_url="{}?file_name={}".format(api_base_url,file_name)   # first file_name is the query parameter
print(api_url)
response = requests.post(api_url)
response_result=json.loads(response.text)
files = { 'file': open(complete_file_path, 'rb')}
r = requests.post(response_result['url'], data=response_result['fields'], files=files)
print(r.status_code)

